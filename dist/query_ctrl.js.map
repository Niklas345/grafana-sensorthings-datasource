{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","appEvents","AlertSrv","GenericDatasourceQueryCtrl","$scope","$injector","alertSrv","scope","notificationShowTime","target","panelType","ctrl","panel","type","selectedDatastreamId","selectedDatastreamName","selectedDatastreamDirty","selectedDatastreamObservationType","allDataSources","selectedSensorId","selectedSensorName","selectedSensorDirty","allSensors","selectedThingId","selectedThingName","selectedThingDirty","allThings","selectedLocationId","selectedLocationName","selectedLocationDirty","allLocations","panelCtrl","events","on","onDataReceived","bind","onDataError","jsonQuery","set","dataList","lastQueryError","err","handleQueryCtrlError","query","refId","error","data","message","targetTypes","push","rawQuery","isOmObservationType","self","datasource","metricFindQuery","then","result","catch","sensor","_","find","text","resetDataSource","targetUrl","value","getFormatedId","id","Number","isInteger","isNaN","datastream","toLowerCase","refresh","isEmpty","includes","thing","location","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\r\nimport './css/query-editor.css!';\r\n\r\nimport { appEvents} from 'app/core/core';\r\nimport { AlertSrv} from 'app/core/core';\r\n\r\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\r\n\r\n    constructor($scope, $injector,alertSrv)  {\r\n\r\n        super($scope, $injector);\r\n\r\n        this.scope = $scope;\r\n        this.alertSrv = alertSrv;\r\n        this.notificationShowTime = 5000;\r\n\r\n        this.target.panelType = this.scope.ctrl.panel.type;\r\n\r\n        this.target.type = this.target.type || 'Sensors';\r\n\r\n        // datastream init\r\n        this.target.selectedDatastreamId = this.target.selectedDatastreamId || 0;\r\n        this.target.selectedDatastreamName = this.target.selectedDatastreamName || 'select a datastream';\r\n        this.target.selectedDatastreamDirty = this.target.selectedDatastreamDirty || false;\r\n        this.target.selectedDatastreamObservationType = this.target.selectedDatastreamObservationType || '';\r\n        this.allDataSources  = {};\r\n        // sensor init\r\n        this.target.selectedSensorId = this.target.selectedSensorId || 0;\r\n        this.target.selectedSensorName = this.target.selectedSensorName || 'select a sensor';\r\n        this.target.selectedSensorDirty = this.target.selectedSensorDirty || false;\r\n        this.allSensors  = {};\r\n        // thing init start\r\n        this.target.selectedThingId = this.target.selectedThingId || 0;\r\n        this.target.selectedThingName = this.target.selectedThingName || 'select a thing';\r\n        this.target.selectedThingDirty = this.target.selectedThingDirty || false;\r\n        this.allThings  = {};\r\n        // location init start\r\n        this.target.selectedLocationId = this.target.selectedLocationId || 0;\r\n        this.target.selectedLocationName = this.target.selectedLocationName || 'select a location';\r\n        this.target.selectedLocationDirty = this.target.selectedLocationDirty || false;\r\n        this.allLocations = {};\r\n\r\n        this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\r\n        this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\r\n\r\n        this.target.jsonQuery = this.target.jsonQuery || '';\r\n        // appEvents.emit('alert-success', ['Test notification sent', '']);\r\n\r\n        if (this.target.selectedThingDirty) {\r\n            this.alertSrv.set(\"Thing Not Found\", this.target.selectedThingId + \" is not a valid thing name\", 'error', this.notificationShowTime);\r\n        }\r\n\r\n        if (this.target.selectedSensorDirty) {\r\n            this.alertSrv.set(\"Sensor Not Found\", this.target.selectedSensorId + \" is not a valid sensor name\", 'error', this.notificationShowTime);\r\n        }\r\n\r\n        if (this.target.selectedDatastreamDirty) {\r\n            this.alertSrv.set(\"Datastream Not Found\", this.target.selectedDatastreamName + \" is not a valid datastream name\", 'error', this.notificationShowTime);\r\n        }\r\n\r\n        if (this.target.selectedLocationDirty) {\r\n            this.alertSrv.set(\"Location Not Found\", this.target.selectedLocationId + \" is not a valid location name\", 'error', this.notificationShowTime);\r\n        }\r\n\r\n    }\r\n\r\n    onDataReceived(dataList) {\r\n        this.lastQueryError = null;\r\n    }\r\n\r\n    onDataError(err) {\r\n        this.handleQueryCtrlError(err);\r\n    }\r\n\r\n    handleQueryCtrlError(err) {\r\n        if (err.query && err.query.refId && err.query.refId !== this.target.refId) {\r\n            return;\r\n        }\r\n\r\n        if (err.error && err.error.data && err.error.data.error) {\r\n            this.lastQueryError = err.error.data.error.message;\r\n        } else if (err.error && err.error.data) {\r\n            this.lastQueryError = err.error.data.message;\r\n        } else if (err.data && err.data.error) {\r\n            this.lastQueryError = err.data.error.message;\r\n        } else if (err.data && err.data.message) {\r\n            this.lastQueryError = err.data.message;\r\n        } else {\r\n            this.lastQueryError = err;\r\n        }\r\n    }\r\n\r\n    getTargetTypes() {\r\n        let targetTypes = ['Sensors', 'Things'];\r\n        if (this.target.panelType == 'table') {\r\n            targetTypes.push('Locations','Historical Locations');\r\n        }\r\n        return targetTypes;\r\n    }\r\n\r\n    showControlTypes(){\r\n        return (this.target.panelType != 'grafana-worldmap-panel');\r\n    }\r\n\r\n    toggleEditorMode() {\r\n        this.target.rawQuery = !this.target.rawQuery;\r\n    }\r\n\r\n\r\n    //sensor starts\r\n    showSensors(){\r\n        return this.target.type == 'Sensors' &&\r\n                (this.target.panelType != 'grafana-worldmap-panel');\r\n    }\r\n\r\n    jsonQueryClick(type) {\r\n        if(!this.isOmObservationType(type)){\r\n            this.alertSrv.set(\"Unsupported Observation Type\", \"JSONPath only works when Datastream.observationType is OM_Observation\" , 'warning', this.notificationShowTime);\r\n        }\r\n    }\r\n\r\n    getSensors(query) {\r\n        let self = this;\r\n        return this.datasource.metricFindQuery((query || ''),\"/Sensors\",'sensor').then((result)=>{\r\n            self.allSensors = result;\r\n            return result;\r\n        }).catch(this.handleQueryCtrlError.bind(this));\r\n    }\r\n\r\n    onSensorChange(query,selectedSensorId) {\r\n        let sensor = _.find(this.allSensors, { 'value' : this.target.selectedSensorId });\r\n\r\n        if(sensor) {\r\n            this.target.selectedSensorName = sensor.text;\r\n            this.target.selectedSensorDirty = false;\r\n        } else {\r\n            this.target.selectedSensorDirty = true;\r\n            this.target.selectedDatastreamId = 0;\r\n            this.alertSrv.set(\"Sensor Not Found\", this.target.selectedSensorId + \" is not a valid sensor name\", 'error', this.notificationShowTime);\r\n        }\r\n        this.resetDataSource();\r\n    }\r\n    //sensor ends\r\n\r\n    //datastream starts\r\n    showDatastreams(){\r\n        return (this.target.selectedSensorId!=0 || this.target.selectedThingId!=0) &&\r\n                (this.target.type == \"Sensors\" || this.target.type == \"Things\") &&\r\n                (this.target.panelType != 'grafana-worldmap-panel');\r\n    }\r\n// TODO: show errors below each query editor\r\n    getDataStreams(query) {\r\n        let self = this;\r\n        let targetUrl = \"\";\r\n        if (this.target.selectedThingDirty || this.target.selectedSensorDirty) {\r\n            return [{\r\n                text: \"select a datastream\",\r\n                value: 0\r\n            }];\r\n        }\r\n        if (this.target.type == 'Sensors') {\r\n            targetUrl = \"/Sensors(\"+this.getFormatedId(this.target.selectedSensorId)+\")/Datastreams\";\r\n        } else {\r\n            targetUrl = \"/Things(\"+this.getFormatedId(this.target.selectedThingId)+\")/Datastreams\";\r\n        }\r\n        return this.datasource.metricFindQuery((query || ''),targetUrl,'datastream').then((result)=>{\r\n            self.allDataSources = result;\r\n            return result;\r\n        }).catch(this.handleQueryCtrlError.bind(this));\r\n    }\r\n\r\n    getFormatedId(id) {\r\n        return (Number.isInteger(id) || !isNaN(id)) ? id : \"'\"+id+\"'\";\r\n    }\r\n\r\n    onDataStreamChange(query) {\r\n        if (this.target.selectedThingDirty || this.target.selectedSensorDirty) {\r\n            return;\r\n        }\r\n\r\n        let datastream = _.find(this.allDataSources, { 'value' : this.target.selectedDatastreamId });\r\n\r\n        if(datastream) {\r\n            this.target.selectedDatastreamName = datastream.text;\r\n            this.target.selectedDatastreamObservationType = datastream.type.toLowerCase();\r\n            this.target.selectedDatastreamDirty = false;\r\n        } else {\r\n            this.target.selectedDatastreamDirty = true;\r\n            this.target.selectedDatastreamName = this.target.selectedDatastreamId;\r\n            this.target.selectedDatastreamObservationType = '';\r\n            this.alertSrv.set(\"Datastream Not Found\", this.target.selectedDatastreamName + \" is not a valid datastream name\", 'error', this.notificationShowTime);\r\n        }\r\n\r\n        if (this.isOmObservationType(this.target.selectedDatastreamObservationType)) {\r\n\r\n        } else {\r\n            this.panelCtrl.refresh();\r\n        }\r\n    }\r\n\r\n    onJsonQueryChange() {\r\n        this.panelCtrl.refresh();\r\n    }\r\n\r\n    showJsonQuery() {\r\n        return (this.target.selectedDatastreamId!=0) &&\r\n                (this.target.type == \"Sensors\" || this.target.type == \"Things\") &&\r\n                (this.target.panelType != 'grafana-worldmap-panel');\r\n    }\r\n\r\n    isOmObservationType(type) {\r\n        if (_.isEmpty(type) || !type.includes('om_observation')) {\r\n            this.target.jsonQuery = \"\";\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    resetDataSource(){\r\n        this.target.selectedDatastreamId = 0;\r\n        this.target.selectedDatastreamName = \"select a datastream\";\r\n        this.panelCtrl.refresh();\r\n    }\r\n    //datastream ends\r\n\r\n    typeChanged(type) {\r\n        this.target.selectedSensorId = 0;\r\n        this.target.selectedThingId = 0;\r\n        this.resetDataSource();\r\n    }\r\n\r\n    //thing starts\r\n    showThings(){\r\n        return this.target.type == 'Things' || this.target.type == 'Historical Locations' || (this.target.panelType == 'grafana-worldmap-panel');\r\n    }\r\n\r\n    getThings(query) {\r\n        let self = this;\r\n        return this.datasource.metricFindQuery((query || ''),\"/Things\",'thing').then((result)=>{\r\n            self.allThings = result;\r\n            return result;\r\n        }).catch(this.handleQueryCtrlError.bind(this));\r\n    }\r\n\r\n    onThingChange(query) {\r\n\r\n        let thing = _.find(this.allThings, { 'value' : this.target.selectedThingId });\r\n        if(thing) {\r\n            this.target.selectedThingName = thing.text;\r\n            this.target.selectedThingDirty = false;\r\n        } else {\r\n            this.target.selectedThingDirty = true;\r\n            this.target.selectedDatastreamId = 0;\r\n            this.alertSrv.set(\"Thing Not Found\", this.target.selectedThingId + \" is not a valid thing name\", 'error', this.notificationShowTime);\r\n        }\r\n        this.resetDataSource();\r\n    }\r\n    //thing ends\r\n\r\n    //location starts\r\n    showLocations(){\r\n        return this.target.type == 'Locations';\r\n    }\r\n\r\n    getLocations(query) {\r\n        let self = this;\r\n        return this.datasource.metricFindQuery((query || ''),\"/Locations\",'location').then((result)=>{\r\n            self.allLocations = result;\r\n            return result;\r\n        }).catch(this.handleQueryCtrlError.bind(this));\r\n    }\r\n\r\n    onLocationChange(query) {\r\n        // find and store the selected location name to use it as column name (refer datasource.js->transformThings())\r\n        let location = _.find(this.allLocations, { 'value' : this.target.selectedLocationId });\r\n\r\n        if (location) {\r\n            this.target.selectedLocationName = location.text;\r\n            this.target.selectedLocationDirty = false;\r\n        } else {\r\n            this.target.selectedLocationDirty = true;\r\n            this.alertSrv.set(\"Location Not Found\", this.target.selectedLocationId + \" is not a valid location name\", 'error', this.notificationShowTime);\r\n        }\r\n\r\n        this.panelCtrl.refresh();\r\n    }\r\n    //location ends\r\n\r\n}\r\n\r\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\r\n"]}